"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const Utils_1 = require("../util/Utils");
/**
 * Static utilities that interface with National Geographic Picture of the Day and Latest News API.
 */
class NationalGeographicAPI {
    /**
     * Function that returns the latest news from National Geographic. Can retrieve articles in 'pages', not only the
     * the very latest articles given combination of `pageSize` and `pageNumber`. If no `pageSize` or `pageNumber` is
     * provided, it returns the latest 3 news articles
     *
     * Supports both Promise and callback based returning of result. If no callback is provided, it returns Promise with
     * result.
     * @param pageSize - The number of articles to be returned from query. Defaults to 3.
     * @param pageNumber - The page number to retrieve, works in conjunction with `pageSize` to determine data.
     * @param cb - Optional callback otherwise Promise based return.
     * @return {Promise<NewsPayload[]> | void}
     */
    static getLatestNews(pageSize, pageNumber, cb) {
        const callback = this.getCallback(arguments.length, pageSize, pageNumber, cb);
        const queryPageSize = isNaN(pageSize) ? this.DEFAULT_PAGE_SIZE : pageSize;
        const queryPageNumber = isNaN(pageNumber) ? this.DEFAULT_PAGE_NUMBER : pageNumber;
        const url = Utils_1.Utils.getLatestNewsUrl(queryPageSize, queryPageNumber);
        return Utils_1.Utils.makeRequest(Utils_1.Utils.getRequestPayload(url), callback);
    }
    /**
     * Function that returns the latest Photo of the Day from National Geographic. Can retrieve today's or any day in
     * the past photo up to January 1st 2009 when Photo of the Day begins. Date can be in millis or UTC string.
     *
     * If there is no photo posted for the day yet due to timezone differences, it will retrieve the previous days photo
     * until today's one is posted.
     *
     * Supports both Promise and callback based returning of result. If no callback is provided, it returns Promise with
     * result.
     *
     * @param day - The historical day to retrieve data for. Defaults to retrieving today's photo.
     * @param cb - Optional callback otherwise Promise based return.
     * @return {Promise<PhotoPayload | void>}
     */
    static getPhotoOfDay(day, cb) {
        return __awaiter(this, arguments, void 0, function* () {
            const callback = this.getCallback(arguments.length, day, cb);
            const url = this.getPhotoUrl(day);
            const payload = yield this.getPayload(url);
            if (payload.data.length > 0) {
                return this.sendResponse(payload, callback);
                // tslint:disable-next-line
            }
            else {
                return this.getYesterdayPhoto(callback);
            }
        });
    }
    static sendResponse(result, callback) {
        if (Object.prototype.toString.call(callback) === '[object Function]') {
            callback(null, result);
        }
        else {
            return result;
        }
    }
    static getYesterdayPhoto(callback) {
        return __awaiter(this, void 0, void 0, function* () {
            const yesterdayDate = new Date();
            yesterdayDate.setDate(yesterdayDate.getDate() - 1);
            const url = this.getPhotoUrl(yesterdayDate.toISOString());
            const payload = yield this.getPayload(url);
            return this.sendResponse(payload, callback);
        });
    }
    static getPayload(url) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const result = yield Utils_1.Utils.makeRequest(Utils_1.Utils.getRequestPayload(url));
                return result;
            }
            catch (e) {
                throw new Error(`National Geographic API retrieval error: ${e.message}`);
            }
        });
    }
    static getCallback(numberOfArguments, pageSize, pageNumber, cb) {
        if (numberOfArguments === 3) {
            return cb;
            // tslint:disable-next-line
        }
        else if (numberOfArguments === 2) {
            if (Object.prototype.toString.call(pageNumber) === '[object Function]') {
                return pageNumber;
            }
        }
        else if (numberOfArguments === 1) {
            if (Object.prototype.toString.call(pageSize) === '[object Function]') {
                return pageSize;
            }
        }
    }
    static getPhotoUrl(day) {
        let fromDate;
        let numberOfDays;
        if (Object.prototype.toString.call(day) !== '[object String]' || isNaN(Date.parse(day))) {
            const targetDate = new Date().toISOString();
            fromDate = targetDate.substring(0, targetDate.indexOf('T'));
            numberOfDays = 1;
        }
        else {
            const targetDate = new Date(day);
            numberOfDays = Math.floor(Math.abs((Date.now() - targetDate.getTime()) / this.oneDayMillis));
            const targetDateISO = targetDate.toISOString();
            fromDate = targetDateISO.substring(0, targetDateISO.indexOf('T'));
        }
        return Utils_1.Utils.getPictureOfDayUrl(fromDate, numberOfDays);
    }
}
NationalGeographicAPI.DEFAULT_PAGE_SIZE = 3;
NationalGeographicAPI.DEFAULT_PAGE_NUMBER = 0;
NationalGeographicAPI.oneDayMillis = 1000 * 60 * 60 * 24;
exports.NationalGeographicAPI = NationalGeographicAPI;
//# sourceMappingURL=NationalGeographicAPI.js.map